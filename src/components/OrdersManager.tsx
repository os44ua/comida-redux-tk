// components/OrdersManager.tsx
// Gestor de pedidos usando Redux para operaciones CRUD
// –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Redux –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π

import React, { useState, useEffect } from 'react';
import './OrdersManager.css';
import logger from '../services/logging';

// Importamos Redux hooks y acciones
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Redux —Ö—É–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
import { useAppDispatch, useOrders } from '../store/hooks';
import { fetchOrders, updateOrder, deleteOrder } from '../store/slices/ordersSlice';
import { addNotification } from '../store/slices/uiSlice';
import type { Order } from '../store/slices/ordersSlice';

const OrdersManager: React.FC = () => {
  // Estados locales para la edici√≥n
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [editingOrder, setEditingOrder] = useState<Order | null>(null);
  const [newQuantity, setNewQuantity] = useState<number>(1);
  
  // Redux hooks
  const dispatch = useAppDispatch();
  const { orders, loading, error } = useOrders();

  // Cargar pedidos al montar el componente
  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    logger.info('üìã Iniciando OrdersManager');
    dispatch(fetchOrders());
    
    return () => {
      logger.debug('üìã OrdersManager desmontado');
    };
  }, [dispatch]);

  // Manejar actualizaci√≥n de pedido
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const handleUpdateOrder = async () => {
    if (!editingOrder || !newQuantity) return;
    
    logger.debug(`üîÑ Iniciando actualizaci√≥n del pedido: ${editingOrder.id}`);
    
    // Calculamos el nuevo precio total
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const unitPrice = editingOrder.totalAmount / editingOrder.quantity;
    const newTotalAmount = unitPrice * newQuantity;
    
    try {
      const result = await dispatch(updateOrder({
        id: editingOrder.id,
        updates: {
          quantity: newQuantity,
          totalAmount: newTotalAmount
        }
      }));
      
      if (updateOrder.fulfilled.match(result)) {
        logger.info(`‚úÖ Pedido ${editingOrder.id} actualizado con √©xito`);
        
        // Mostramos notificaci√≥n de √©xito
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        dispatch(addNotification({
          type: 'success',
          message: 'Pedido actualizado correctamente',
          autoHide: true
        }));
        
        setEditingOrder(null);
      } else {
        throw new Error(result.payload as string);
      }
    } catch (error) {
      logger.error(`‚ùå Error al actualizar pedido: ${error}`);
      
      // Mostramos notificaci√≥n de error
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      dispatch(addNotification({
        type: 'error',
        message: 'Error al actualizar el pedido',
        autoHide: true
      }));
    }
  };
  
  // Manejar eliminaci√≥n de pedido
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const handleDeleteOrder = async (orderId: string, orderName: string) => {
    if (!window.confirm('¬øEst√°s seguro de que quieres eliminar este pedido?')) return;
    
    logger.debug(`üóëÔ∏è Iniciando eliminaci√≥n del pedido: ${orderId}`);
    
    try {
      const result = await dispatch(deleteOrder(orderId));
      
      if (deleteOrder.fulfilled.match(result)) {
        logger.info(`‚úÖ Pedido ${orderId} eliminado con √©xito`);
        
        // Mostramos notificaci√≥n de √©xito
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        dispatch(addNotification({
          type: 'success',
          message: `Pedido de ${orderName} eliminado`,
          autoHide: true
        }));
      } else {
        throw new Error(result.payload as string);
      }
    } catch (error) {
      logger.error(`‚ùå Error al eliminar pedido: ${error}`);
      
      // Mostramos notificaci√≥n de error
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      dispatch(addNotification({
        type: 'error',
        message: 'Error al eliminar el pedido',
        autoHide: true
      }));
    }
  };
  
  // Funci√≥n para formatear fecha
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
  };

  // Manejar el bot√≥n de recargar pedidos
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤
  const handleRefreshOrders = () => {
    logger.debug('üîÑ Recargando pedidos manualmente');
    dispatch(fetchOrders());
  };
  
  return (
    <div className="orders-manager">
      <div className="orders-header">
        <h2>üìã Gesti√≥n de Pedidos</h2>
        <button 
          onClick={handleRefreshOrders}
          disabled={loading}
          className="refresh-button"
          style={{
            marginLeft: '10px',
            padding: '5px 10px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: loading ? 'not-allowed' : 'pointer'
          }}
        >
          {loading ? 'Cargando...' : 'üîÑ Actualizar'}
        </button>
      </div>
      
      {/* Indicador de carga */}
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {loading && (
        <div className="loading-indicator">
          Cargando pedidos...
        </div>
      )}
      
      {/* Mensaje de error */}
      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {error && (
        <div className="error-message">
          ‚ùå {error}
          <button 
            onClick={() => dispatch(fetchOrders())}
            style={{marginLeft: '10px'}}
          >
            Reintentar
          </button>
        </div>
      )}
      
      {/* Lista de pedidos */}
      {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
      {orders.length === 0 && !loading ? (
        <div className="empty-message">
          üì≠ No hay pedidos disponibles
        </div>
      ) : (
        <div className="orders-list">
          {orders.map(order => (
            <div key={order.id} className="order-card">
              <div className="order-header">
                <h3>Pedido #{order.id.substring(0, 6)}</h3>
                <span className="order-date">{formatDate(order.timestamp)}</span>
              </div>
              
              <div className="order-details">
                <p><strong>üë§ Cliente:</strong> {order.customerName}</p>
                <p><strong>üìû Tel√©fono:</strong> {order.phone}</p>
                <p><strong>üçΩÔ∏è Producto:</strong> {order.foodName}</p>
                <p><strong>üì¶ Cantidad:</strong> {order.quantity}</p>
                <p><strong>üí∞ Total:</strong> {order.totalAmount.toFixed(2)}‚Ç¨</p>
              </div>
              
              <div className="order-actions">
                <button
                  className="edit-button"
                  onClick={() => {
                    setEditingOrder(order);
                    setNewQuantity(order.quantity);
                  }}
                  disabled={loading}
                >
                  ‚úèÔ∏è Editar
                </button>
                <button
                  className="delete-button"
                  onClick={() => handleDeleteOrder(order.id, order.foodName)}
                  disabled={loading}
                >
                  üóëÔ∏è Eliminar
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
      
      {/* Modal de edici√≥n */}
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {editingOrder && (
        <div className="edit-modal">
          <div className="modal-content">
            <h3>‚úèÔ∏è Editar Pedido</h3>
            
            <div className="order-info">
              <p><strong>Cliente:</strong> {editingOrder.customerName}</p>
              <p><strong>Producto:</strong> {editingOrder.foodName}</p>
              <p><strong>Precio unitario:</strong> {(editingOrder.totalAmount / editingOrder.quantity).toFixed(2)}‚Ç¨</p>
            </div>
            
            <div className="form-group">
              <label htmlFor="quantity">Nueva cantidad:</label>
              <input
                type="number"
                id="quantity"
                min="1"
                value={newQuantity}
                onChange={(e) => setNewQuantity(parseInt(e.target.value) || 1)}
              />
              <p><strong>Nuevo total:</strong> {((editingOrder.totalAmount / editingOrder.quantity) * newQuantity).toFixed(2)}‚Ç¨</p>
            </div>
            
            <div className="modal-actions">
              <button 
                className="cancel-button" 
                onClick={() => setEditingOrder(null)}
                disabled={loading}
              >
                ‚ùå Cancelar
              </button>
              <button 
                className="save-button" 
                onClick={handleUpdateOrder}
                disabled={loading}
              >
                {loading ? 'Guardando...' : '‚úÖ Guardar cambios'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default OrdersManager;