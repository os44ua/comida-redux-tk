// –ü–†–û–°–¢–ê–Ø –≤–µ—Ä—Å–∏—è middleware –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
// Versi√≥n SIMPLE sin tipado complejo

import type { Middleware } from '@reduxjs/toolkit';

// –ü—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞
const logger = {
  debug: (message: string, data?: any) => console.log(`üü¢ DEBUG: ${message}`, data || ''),
  info: (message: string, data?: any) => console.log(`üîµ INFO: ${message}`, data || ''),
  warn: (message: string, data?: any) => console.warn(`üü† WARN: ${message}`, data || ''),
  error: (message: string, data?: any) => console.error(`‚ùå ERROR: ${message}`, data || ''),
};

// –ü—Ä–æ—Å—Ç–æ–π middleware –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AnyAction
export const loggerMiddleware: Middleware = store => next => action => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º type
  if (typeof action === 'object' && action !== null && 'type' in action) {
    const type = (action as any).type;
    const payload = (action as any).payload;

    logger.debug(`üöÄ Ejecutando acci√≥n: ${type}`);

    // –õ–æ–≥–≥–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (fulfilled, rejected, pending)
    if (type.includes('fulfilled')) {
      logger.info(`‚úÖ Acci√≥n completada exitosamente: ${type}`);
    } else if (type.includes('rejected')) {
      logger.error(`‚ùå Acci√≥n fall√≥: ${type}`, payload);
    } else if (type.includes('pending')) {
      logger.info(`‚è≥ Acci√≥n iniciada: ${type}`);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const prevState = store.getState();

  // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
  const result = next(action);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const nextState = store.getState();

  logger.debug('üßæ Cambio de estado:', { prevState, nextState });

  return result;
};
