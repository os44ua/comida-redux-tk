// Slice para gesti√≥n del men√∫ de productos
// Slice –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤

import { createSlice, createAsyncThunk, type PayloadAction } from '@reduxjs/toolkit';
import type { MenuItem } from '../../entities/entities';
import { ref, get, update } from 'firebase/database';
import { db } from '../../firebaseConfig';
import logger from '../../services/logging';

// Estado inicial del men√∫
// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é
interface MenuState {
  items: MenuItem[];
  loading: boolean;
  error: string | null;
}

// Datos iniciales del men√∫ (fallback si Firebase falla)
// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é (—Ä–µ–∑–µ—Ä–≤ –µ—Å–ª–∏ Firebase –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
const initialMenuItems: MenuItem[] = [
  {
    id: 1,
    name: "Hamburguesa de Pollo",
    quantity: 40,
    desc: "Hamburguesa de pollo frito - lechuga, tomate, queso y mayonesa",
    price: 24,
    image: "cb.jpeg",
  },
  {
    id: 2,
    name: "Hamburguesa Vegetariana",
    quantity: 30,
    desc: "Hamburguesa verde - lechuga, tomate, queso vegano y mayonesa",
    price: 22,
    image: "vb.jpg",
  },
  {
    id: 3,
    name: "Patatas Fritas",
    quantity: 50,
    desc: "Patatas crujientes con sal y especias",
    price: 8,
    image: "chips.jpeg",
  },
  {
    id: 4,
    name: "Helado",
    quantity: 30,
    desc: "Helado casero de vainilla con toppings",
    price: 6,
    image: "ic.jpeg",
  },
];

const initialState: MenuState = {
  items: initialMenuItems,
  loading: false,
  error: null,
};

// AsyncThunk para cargar el men√∫ desde Firebase
// AsyncThunk –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –∏–∑ Firebase
export const fetchMenu = createAsyncThunk(
  'menu/fetchMenu',
  async (_, { rejectWithValue }) => {
    try {
      logger.info('üîÑ Iniciando carga de men√∫ desde Firebase');
      
      const menuRef = ref(db, 'menu');
      const snapshot = await get(menuRef);
      
      if (snapshot.exists()) {
        const menuData = snapshot.val();
        const menuArray = Object.entries(menuData).map(([id, data]) => ({
          id: parseInt(id),
          ...(data as Omit<MenuItem, 'id'>)
        }));
        
        logger.info(`‚úÖ Men√∫ cargado exitosamente: ${menuArray.length} productos`);
        return menuArray;
      } else {
        // Si no hay datos en Firebase, inicializamos con datos por defecto
        // –ï—Å–ª–∏ –≤ Firebase –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        logger.info('üìù Inicializando men√∫ con datos por defecto');
        await initializeMenuInFirebase();
        return initialMenuItems;
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      logger.error(`‚ùå Error al cargar men√∫: ${errorMessage}`);
      return rejectWithValue(errorMessage);
    }
  }
);

// AsyncThunk para actualizar stock de un producto
// AsyncThunk –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
export const updateMenuItemStock = createAsyncThunk(
  'menu/updateStock',
  async ({ id, newQuantity }: { id: number; newQuantity: number }, { rejectWithValue }) => {
    try {
      logger.debug(`üîÑ Actualizando stock del producto ${id} a ${newQuantity}`);
      
     // const itemRef = ref(db, `menu/${id}/quantity`);
      await update(ref(db, `menu/${id}`), { quantity: newQuantity });
      
      logger.info(`‚úÖ Stock actualizado para producto ${id}`);
      return { id, newQuantity };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      logger.error(`‚ùå Error al actualizar stock: ${errorMessage}`);
      return rejectWithValue(errorMessage);
    }
  }
);

// Funci√≥n auxiliar para inicializar el men√∫ en Firebase
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω—é –≤ Firebase
const initializeMenuInFirebase = async () => {
  try {
    const menuRef = ref(db, 'menu');
    const initialData: Record<number, Omit<MenuItem, 'id'>> = {};
    
    initialMenuItems.forEach(item => {
      initialData[item.id] = {
        name: item.name,
        quantity: item.quantity,
        desc: item.desc,
        price: item.price,
        image: item.image
      };
    });
    
    await update(menuRef, initialData);
    logger.info('‚úÖ Men√∫ inicializado en Firebase');
  } catch (error) {
    logger.error(`‚ùå Error al inicializar men√∫ en Firebase: ${error}`);
  }
};

// Creaci√≥n del slice
// –°–æ–∑–¥–∞–Ω–∏–µ slice
const menuSlice = createSlice({
  name: 'menu',
  initialState,
  reducers: {
    // Reducer para disminuir stock localmente (optimistic update)
    // Reducer –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ (optimistic update)
    decreaseStock: (state, action: PayloadAction<{ id: number; quantity: number }>) => {
      const item = state.items.find(item => item.id === action.payload.id);
      if (item && item.quantity >= action.payload.quantity) {
        item.quantity -= action.payload.quantity;
        logger.debug(`üì¶ Stock local actualizado: producto ${action.payload.id}, nuevo stock: ${item.quantity}`);
      }
    },
    
    // Reducer para aumentar stock localmente (cuando se elimina del carrito)
    // Reducer –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ (–∫–æ–≥–¥–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)
    increaseStock: (state, action: PayloadAction<{ id: number; quantity: number }>) => {
      const item = state.items.find(item => item.id === action.payload.id);
      if (item) {
        item.quantity += action.payload.quantity;
        logger.debug(`üì¶ Stock restaurado: producto ${action.payload.id}, nuevo stock: ${item.quantity}`);
      }
    },
    
    // Limpiar errores
    // –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
    clearError: (state) => {
      state.error = null;
    }
  },
  extraReducers: (builder) => {
    builder
      // Casos para fetchMenu
      // –ö–µ–π—Å—ã –¥–ª—è fetchMenu
      .addCase(fetchMenu.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchMenu.fulfilled, (state, action) => {
        state.loading = false;
        state.items = action.payload;
      })
      .addCase(fetchMenu.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string || 'Error al cargar el men√∫';
      })
      
      // Casos para updateMenuItemStock
      // –ö–µ–π—Å—ã –¥–ª—è updateMenuItemStock
      .addCase(updateMenuItemStock.pending, (state) => {
        state.loading = true;
      })
      .addCase(updateMenuItemStock.fulfilled, (state, action) => {
        state.loading = false;
        const item = state.items.find(item => item.id === action.payload.id);
        if (item) {
          item.quantity = action.payload.newQuantity;
        }
      })
      .addCase(updateMenuItemStock.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string || 'Error al actualizar stock';
      });
  },
});

// Exportamos las acciones y el reducer
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ reducer
export const { decreaseStock, increaseStock, clearError } = menuSlice.actions;
export default menuSlice.reducer;