// store/slices/uiSlice.ts
// Slice para gesti√≥n de estados de la interfaz de usuario
// Slice –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

import { createSlice, type PayloadAction } from '@reduxjs/toolkit';
import type { MenuItem } from '../../entities/entities';
import logger from '../../services/logging';

// Estado de la interfaz de usuario
// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
interface UIState {
  isChooseFoodPage: boolean;    // Si estamos en la p√°gina de elegir comida / –ù–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–±–æ—Ä–∞ –µ–¥—ã
  showCart: boolean;            // Si el carrito est√° visible / –í–∏–¥–Ω–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞
  showOrdersManager: boolean;   // Si el gestor de pedidos est√° visible / –í–∏–¥–µ–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–æ–≤
  selectedFood: MenuItem | null; // Comida seleccionada actualmente / –í—ã–±—Ä–∞–Ω–Ω–∞—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ–¥–∞
  notifications: Notification[]; // Notificaciones del sistema / –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
}

// Interfaz para notificaciones
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export interface Notification {
  id: string;
  type: 'success' | 'error' | 'info' | 'warning';
  message: string;
  timestamp: number;
  autoHide?: boolean; // Si se oculta autom√°ticamente / –°–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
}

// Estado inicial
// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState: UIState = {
  isChooseFoodPage: false,
  showCart: false,
  showOrdersManager: false,
  selectedFood: null,
  notifications: [],
};

// Creaci√≥n del slice
// –°–æ–∑–¥–∞–Ω–∏–µ slice
const uiSlice = createSlice({
  name: 'ui',
  initialState,
  reducers: {
    // Alternar p√°gina de elegir comida
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –µ–¥—ã
    toggleChooseFoodPage: (state) => {
      state.isChooseFoodPage = !state.isChooseFoodPage;
      logger.debug(`üîÑ P√°gina de elegir comida: ${state.isChooseFoodPage ? 'activada' : 'desactivada'}`);
      
      // Si salimos de la p√°gina de elegir comida, limpiamos la selecci√≥n
      // –ï—Å–ª–∏ –ø–æ–∫–∏–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –µ–¥—ã, –æ—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
      if (!state.isChooseFoodPage) {
        state.selectedFood = null;
      }
    },
    
    // Establecer estado de p√°gina de elegir comida
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –µ–¥—ã
    setChooseFoodPage: (state, action: PayloadAction<boolean>) => {
      state.isChooseFoodPage = action.payload;
      logger.debug(`üìÑ P√°gina de elegir comida establecida: ${action.payload}`);
      
      if (!action.payload) {
        state.selectedFood = null;
      }
    },
    
    // Alternar visibilidad del carrito
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
    toggleCart: (state) => {
      state.showCart = !state.showCart;
      logger.debug(`üõí Carrito: ${state.showCart ? 'mostrado' : 'oculto'}`);
    },
    
    // Establecer visibilidad del carrito
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
    setShowCart: (state, action: PayloadAction<boolean>) => {
      state.showCart = action.payload;
      logger.debug(`üõí Visibilidad del carrito establecida: ${action.payload}`);
    },
    
    // Alternar gestor de pedidos
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–æ–≤
    toggleOrdersManager: (state) => {
      state.showOrdersManager = !state.showOrdersManager;
      logger.debug(`üìã Gestor de pedidos: ${state.showOrdersManager ? 'mostrado' : 'oculto'}`);
    },
    
    // Establecer visibilidad del gestor de pedidos
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
    setShowOrdersManager: (state, action: PayloadAction<boolean>) => {
      state.showOrdersManager = action.payload;
      logger.debug(`üìã Visibilidad del gestor de pedidos establecida: ${action.payload}`);
    },
    
    // Seleccionar comida
    // –í—ã–±—Ä–∞—Ç—å –µ–¥—É
    setSelectedFood: (state, action: PayloadAction<MenuItem | null>) => {
      state.selectedFood = action.payload;
      if (action.payload) {
        logger.debug(`üçΩÔ∏è Comida seleccionada: ${action.payload.name}`);
      } else {
        logger.debug('üçΩÔ∏è Selecci√≥n de comida limpiada');
      }
    },
    
    // Volver al men√∫ (limpiar selecci√≥n de comida)
    // –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é (–æ—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –µ–¥—ã)
    returnToMenu: (state) => {
      state.selectedFood = null;
      logger.debug('üîô Regresando al men√∫ principal');
    },
    
    // A√±adir notificaci√≥n
    // –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    addNotification: (state, action: PayloadAction<Omit<Notification, 'id' | 'timestamp'>>) => {
      const notification: Notification = {
        ...action.payload,
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
        timestamp: Date.now(),
      };
      
      state.notifications.push(notification);
      logger.debug(`üì¢ Nueva notificaci√≥n a√±adida: ${notification.type} - ${notification.message}`);
      
      // Limitar el n√∫mero de notificaciones (m√°ximo 5)
      // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 5)
      if (state.notifications.length > 5) {
        state.notifications.shift();
      }
    },
    
    // Remover notificaci√≥n por ID
    // –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID
    removeNotification: (state, action: PayloadAction<string>) => {
      const initialLength = state.notifications.length;
      state.notifications = state.notifications.filter(
        notification => notification.id !== action.payload
      );
      
      if (state.notifications.length < initialLength) {
        logger.debug(`üì¢ Notificaci√≥n removida: ${action.payload}`);
      }
    },
    
    // Limpiar todas las notificaciones
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    clearNotifications: (state) => {
      const count = state.notifications.length;
      state.notifications = [];
      if (count > 0) {
        logger.debug(`üì¢ ${count} notificaciones limpiadas`);
      }
    },
    
    // Limpiar notificaciones antiguas (m√°s de 30 segundos)
    // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫—É–Ω–¥)
    clearOldNotifications: (state) => {
      const now = Date.now();
      const oldCount = state.notifications.length;
      
      state.notifications = state.notifications.filter(
        notification => now - notification.timestamp < 30000 // 30 segundos / 30 —Å–µ–∫—É–Ω–¥
      );
      
      const removedCount = oldCount - state.notifications.length;
      if (removedCount > 0) {
        logger.debug(`üì¢ ${removedCount} notificaciones antiguas limpiadas`);
      }
    },
    
    // Resetear toda la UI al estado inicial
    // –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å UI –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    resetUI: (_) => { //–∑–∞–º–µ–Ω–∏–ª–∞ state –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
      logger.info('üîÑ Reseteando interfaz de usuario al estado inicial');
      return initialState;
    },
    
    // Cerrar todos los modales/overlays
    // –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞/–æ–≤–µ—Ä–ª–µ–∏
    closeAllModals: (state) => {
      state.showCart = false;
      state.showOrdersManager = false;
      state.selectedFood = null;
      logger.debug('‚ùå Todos los modales cerrados');
    }
  },
});

// Exportamos las acciones y el reducer
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ reducer
export const {
  toggleChooseFoodPage,
  setChooseFoodPage,
  toggleCart,
  setShowCart,
  toggleOrdersManager,
  setShowOrdersManager,
  setSelectedFood,
  returnToMenu,
  addNotification,
  removeNotification,
  clearNotifications,
  clearOldNotifications,
  resetUI,
  closeAllModals
} = uiSlice.actions;

export default uiSlice.reducer;