// Slice para gesti√≥n de pedidos con operaciones CRUD en Firebase
// Slice –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ —Å CRUD –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ Firebase

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { ref, push, update, remove, get } from 'firebase/database';
import { db } from '../../firebaseConfig';
import logger from '../../services/logging';

// Interfaz para pedidos
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
export interface Order {
  id: string;
  foodId: number;
  foodName: string;
  customerName: string;
  phone: string;
  quantity: number;
  totalAmount: number;
  timestamp: string;
}

// Interfaz para crear un nuevo pedido
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
export interface CreateOrderData {
  foodId: number;
  foodName: string;
  customerName: string;
  phone: string;
  quantity: number;
  totalAmount: number;
}

// Estado de los pedidos
// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
interface OrdersState {
  orders: Order[];
  loading: boolean;
  error: string | null;
  submittingOrder: boolean; // Para el estado de env√≠o de pedidos / –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤
}

// Estado inicial
// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState: OrdersState = {
  orders: [],
  loading: false,
  error: null,
  submittingOrder: false,
};

// AsyncThunk para crear un nuevo pedido
// AsyncThunk –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
export const createOrder = createAsyncThunk(
  'orders/createOrder',
  async (orderData: CreateOrderData, { rejectWithValue }) => {
    try {
      logger.info(`üìù Iniciando creaci√≥n de pedido para ${orderData.customerName}`);
      
      const orderWithTimestamp = {
        ...orderData,
        timestamp: new Date().toISOString()
      };
      
      const ordersRef = ref(db, 'orders');
      const newOrderRef = await push(ordersRef, orderWithTimestamp);
      
      // Devolvemos el pedido con su ID generado
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫–∞–∑ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ID
      const createdOrder: Order = {
        id: newOrderRef.key!,
        ...orderWithTimestamp
      };
      
      logger.info(`‚úÖ Pedido creado exitosamente con ID: ${createdOrder.id}`);
      return createdOrder;
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      logger.error(`‚ùå Error al crear pedido: ${errorMessage}`);
      return rejectWithValue(errorMessage);
    }
  }
);

// AsyncThunk para obtener todos los pedidos
// AsyncThunk –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
export const fetchOrders = createAsyncThunk(
  'orders/fetchOrders',
  async (_, { rejectWithValue }) => {
    try {
      logger.info('üîÑ Iniciando carga de pedidos desde Firebase');
      
      const ordersRef = ref(db, 'orders');
      const snapshot = await get(ordersRef);
      
      if (snapshot.exists()) {
        const ordersData = snapshot.val();
        const ordersArray: Order[] = Object.entries(ordersData).map(([id, data]) => ({
          id,
          ...(data as Omit<Order, 'id'>)
        }));
        
        // Ordenamos por timestamp (m√°s recientes primero)
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        ordersArray.sort((a, b) => 
          new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
        );
        
        logger.info(`‚úÖ ${ordersArray.length} pedidos cargados exitosamente`);
        return ordersArray;
      } else {
        logger.info('üì≠ No hay pedidos disponibles');
        return [];
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      logger.error(`‚ùå Error al cargar pedidos: ${errorMessage}`);
      return rejectWithValue(errorMessage);
    }
  }
);

// AsyncThunk para actualizar un pedido
// AsyncThunk –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
export const updateOrder = createAsyncThunk(
  'orders/updateOrder',
  async ({ id, updates }: { id: string; updates: Partial<Order> }, { rejectWithValue }) => {
    try {
      logger.debug(`üîÑ Actualizando pedido: ${id}`);
      
      const orderRef = ref(db, `orders/${id}`);
      await update(orderRef, updates);
      
      logger.info(`‚úÖ Pedido ${id} actualizado exitosamente`);
      return { id, updates };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      logger.error(`‚ùå Error al actualizar pedido: ${errorMessage}`);
      return rejectWithValue(errorMessage);
    }
  }
);

// AsyncThunk para eliminar un pedido
// AsyncThunk –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
export const deleteOrder = createAsyncThunk(
  'orders/deleteOrder',
  async (orderId: string, { rejectWithValue }) => {
    try {
      logger.debug(`üóëÔ∏è Eliminando pedido: ${orderId}`);
      
      const orderRef = ref(db, `orders/${orderId}`);
      await remove(orderRef);
      
      logger.info(`‚úÖ Pedido ${orderId} eliminado exitosamente`);
      return orderId;
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      logger.error(`‚ùå Error al eliminar pedido: ${errorMessage}`);
      return rejectWithValue(errorMessage);
    }
  }
);

// Creaci√≥n del slice
// –°–æ–∑–¥–∞–Ω–∏–µ slice
const ordersSlice = createSlice({
  name: 'orders',
  initialState,
  reducers: {
    // Limpiar errores
    // –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
    clearError: (state) => {
      state.error = null;
    },
    
    // Limpiar todos los pedidos (para testing o reset)
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–±—Ä–æ—Å–∞)
    clearOrders: (state) => {
      state.orders = [];
      logger.info('üßπ Todos los pedidos han sido limpiados del estado');
    }
  },
  extraReducers: (builder) => {
    builder
      // Casos para createOrder
      // –ö–µ–π—Å—ã –¥–ª—è createOrder
      .addCase(createOrder.pending, (state) => {
        state.submittingOrder = true;
        state.error = null;
      })
      .addCase(createOrder.fulfilled, (state, action) => {
        state.submittingOrder = false;
        // A√±adimos el nuevo pedido al principio de la lista
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        state.orders.unshift(action.payload);
      })
      .addCase(createOrder.rejected, (state, action) => {
        state.submittingOrder = false;
        state.error = action.payload as string || 'Error al crear el pedido';
      })
      
      // Casos para fetchOrders
      // –ö–µ–π—Å—ã –¥–ª—è fetchOrders
      .addCase(fetchOrders.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchOrders.fulfilled, (state, action) => {
        state.loading = false;
        state.orders = action.payload;
      })
      .addCase(fetchOrders.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string || 'Error al cargar pedidos';
      })
      
      // Casos para updateOrder
      // –ö–µ–π—Å—ã –¥–ª—è updateOrder
      .addCase(updateOrder.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(updateOrder.fulfilled, (state, action) => {
        state.loading = false;
        const { id, updates } = action.payload;
        
        // Encontramos y actualizamos el pedido en el estado
        // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        const orderIndex = state.orders.findIndex(order => order.id === id);
        if (orderIndex !== -1) {
          state.orders[orderIndex] = { ...state.orders[orderIndex], ...updates };
        }
      })
      .addCase(updateOrder.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string || 'Error al actualizar pedido';
      })
      
      // Casos para deleteOrder
      // –ö–µ–π—Å—ã –¥–ª—è deleteOrder
      .addCase(deleteOrder.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(deleteOrder.fulfilled, (state, action) => {
        state.loading = false;
        // Removemos el pedido eliminado del estado
        // –£–¥–∞–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state.orders = state.orders.filter(order => order.id !== action.payload);
      })
      .addCase(deleteOrder.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string || 'Error al eliminar pedido';
      });
  },
});

// Exportamos las acciones y el reducer
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ reducer
export const { clearError, clearOrders } = ordersSlice.actions;
export default ordersSlice.reducer;