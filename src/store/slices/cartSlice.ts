// store/slices/cartSlice.ts
// Slice para gesti√≥n del carrito de compras
// Slice –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–∫—É–ø–æ–∫

import { createSlice, type PayloadAction } from '@reduxjs/toolkit';
import type { MenuItem } from '../../entities/entities';
import logger from '../../services/logging';

// Interfaz para elementos del carrito
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
export interface CartItem {
  item: MenuItem;
  quantity: number;
}

// Estado del carrito
// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
interface CartState {
  items: CartItem[];
  totalItems: number;
  totalAmount: number;
}

// Estado inicial
// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState: CartState = {
  items: [],
  totalItems: 0,
  totalAmount: 0,
};

// Funci√≥n auxiliar para calcular totales
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤
const calculateTotals = (items: CartItem[]) => {
  const totalItems = items.reduce((total, cartItem) => total + cartItem.quantity, 0);
  const totalAmount = items.reduce((total, cartItem) => total + (cartItem.item.price * cartItem.quantity), 0);
  
  return { totalItems, totalAmount };
};

// Creaci√≥n del slice
// –°–æ–∑–¥–∞–Ω–∏–µ slice
const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    // A√±adir producto al carrito
    // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
    addItem: (state, action: PayloadAction<{ item: MenuItem; quantity: number }>) => {
      const { item, quantity } = action.payload;
      
      // Verificamos si el producto ya existe en el carrito
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
      const existingItem = state.items.find(cartItem => cartItem.item.id === item.id);
      
      if (existingItem) {
        // Si existe, aumentamos la cantidad
        // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        existingItem.quantity += quantity;
        logger.info(`üõí Cantidad actualizada en carrito: ${item.name}, nueva cantidad: ${existingItem.quantity}`);
      } else {
        // Si no existe, lo a√±adimos como nuevo elemento
        // –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        state.items.push({ item, quantity });
        logger.info(`üõí Nuevo producto a√±adido al carrito: ${item.name}, cantidad: ${quantity}`);
      }
      
      // Recalculamos los totales
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
      const totals = calculateTotals(state.items);
      state.totalItems = totals.totalItems;
      state.totalAmount = totals.totalAmount;
    },
    
    // Remover producto del carrito completamente
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    removeItem: (state, action: PayloadAction<number>) => {
      const itemId = action.payload;
      const itemToRemove = state.items.find(cartItem => cartItem.item.id === itemId);
      
      if (itemToRemove) {
        logger.info(`üóëÔ∏è Producto eliminado del carrito: ${itemToRemove.item.name}`);
        
        // Filtramos el elemento eliminado
        // –§–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        state.items = state.items.filter(cartItem => cartItem.item.id !== itemId);
        
        // Recalculamos los totales
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        const totals = calculateTotals(state.items);
        state.totalItems = totals.totalItems;
        state.totalAmount = totals.totalAmount;
      }
    },
    
    // Actualizar cantidad de un producto espec√≠fico
    // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    updateQuantity: (state, action: PayloadAction<{ id: number; quantity: number }>) => {
      const { id, quantity } = action.payload;
      const item = state.items.find(cartItem => cartItem.item.id === id);
      
      if (item) {
        if (quantity > 0) {
          item.quantity = quantity;
          logger.debug(`üîÑ Cantidad actualizada en carrito: producto ${id}, nueva cantidad: ${quantity}`);
        } else {
          // Si la cantidad es 0, eliminamos el elemento
          // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0, —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
          state.items = state.items.filter(cartItem => cartItem.item.id !== id);
          logger.info(`üóëÔ∏è Producto eliminado por cantidad 0: ${item.item.name}`);
        }
        
        // Recalculamos los totales
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        const totals = calculateTotals(state.items);
        state.totalItems = totals.totalItems;
        state.totalAmount = totals.totalAmount;
      }
    },
    
    // Limpiar todo el carrito
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É
    clearCart: (state) => {
      logger.info('üßπ Carrito limpiado completamente');
      state.items = [];
      state.totalItems = 0;
      state.totalAmount = 0;
    },
    
    // Aumentar cantidad de un producto en 1
    // –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ 1
    incrementQuantity: (state, action: PayloadAction<number>) => {
      const itemId = action.payload;
      const item = state.items.find(cartItem => cartItem.item.id === itemId);
      
      if (item) {
        item.quantity += 1;
        logger.debug(`‚ûï Cantidad incrementada: producto ${itemId}, nueva cantidad: ${item.quantity}`);
        
        // Recalculamos los totales
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        const totals = calculateTotals(state.items);
        state.totalItems = totals.totalItems;
        state.totalAmount = totals.totalAmount;
      }
    },
    
    // Disminuir cantidad de un producto en 1
    // –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ 1
    decrementQuantity: (state, action: PayloadAction<number>) => {
      const itemId = action.payload;
      const item = state.items.find(cartItem => cartItem.item.id === itemId);
      
      if (item) {
        if (item.quantity > 1) {
          item.quantity -= 1;
          logger.debug(`‚ûñ Cantidad decrementada: producto ${itemId}, nueva cantidad: ${item.quantity}`);
        } else {
          // Si la cantidad llega a 1 y decrementamos, eliminamos el elemento
          // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 1 –∏ —É–º–µ–Ω—å—à–∞–µ–º, —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
          state.items = state.items.filter(cartItem => cartItem.item.id !== itemId);
          logger.info(`üóëÔ∏è Producto eliminado por decremento: ${item.item.name}`);
        }
        
        // Recalculamos los totales
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        const totals = calculateTotals(state.items);
        state.totalItems = totals.totalItems;
        state.totalAmount = totals.totalAmount;
      }
    }
  },
});

// Exportamos las acciones y el reducer
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ reducer
export const {
  addItem,
  removeItem,
  updateQuantity,
  clearCart,
  incrementQuantity,
  decrementQuantity
} = cartSlice.actions;

export default cartSlice.reducer;