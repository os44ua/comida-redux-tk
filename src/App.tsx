// App.tsx
// Componente principal de la aplicaci√≥n usando Redux Toolkit
// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Redux Toolkit

import { useEffect, lazy, Suspense } from 'react'
import './App.css'
import FoodOrder from './components/FoodOrder';
import Cart from './components/Cart';
import ErrorBoundary from './components/ErrorBoundary';
import OrdersManager from './components/OrdersManager';
import Notifications from './components/Notifications'; // A√±adimos el componente de notificaciones
import logger from './services/logging';

// Importamos los hooks y acciones de Redux
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è Redux
import { useAppDispatch, useAppSelector, useCartTotalItems, useUI } from './store/hooks';
import { fetchMenu } from './store/slices/menuSlice';
import { fetchOrders } from './store/slices/ordersSlice';
import { 
  toggleChooseFoodPage, 
  toggleCart, 
  toggleOrdersManager,
  setSelectedFood 
} from './store/slices/uiSlice';

// Carga diferida de componentes
// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const Foods = lazy(() => import('./components/Foods'));

function App() {
  // Redux hooks
  const dispatch = useAppDispatch();
  const menuItems = useAppSelector(state => state.menu.items);
  //const cartItems = useAppSelector(state => state.cart.items);
  const cartTotalItems = useCartTotalItems();
  const uiState = useUI();
  const isLoading = useAppSelector(state => state.menu.loading);

  // Inicializaci√≥n de la aplicaci√≥n
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    logger.info("üöÄ Aplicaci√≥n Redux iniciada");
    
    // Cargamos el men√∫ inicial desde Firebase
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏–∑ Firebase
    dispatch(fetchMenu());
    
    return () => {
      logger.info("üîö Aplicaci√≥n finalizada");
    };
  }, [dispatch]);

  // Manejadores de eventos
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleToggleFoodPage = () => {
    logger.debug('üîÑ Alternando p√°gina de comida');
    dispatch(toggleChooseFoodPage());
  };

  const handleToggleCart = () => {
    logger.debug('üõí Alternando carrito');
    dispatch(toggleCart());
  };

  const handleToggleOrdersManager = () => {
    logger.debug('üìã Alternando gestor de pedidos');
    dispatch(toggleOrdersManager());
    
    // Si abrimos el gestor de pedidos, cargamos los pedidos
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
    if (!uiState.showOrdersManager) {
      dispatch(fetchOrders());
    }
  };

  const handleFoodSelected = (food: any) => {
    logger.debug(`üçΩÔ∏è Comida seleccionada: ${food.name}`);
    dispatch(setSelectedFood(food));
  };

  const handleReturnToMenu = () => {
    logger.debug('üîô Regresando al men√∫');
    dispatch(setSelectedFood(null));
  };

  // UI de respaldo para ErrorBoundary
  // –†–µ–∑–µ—Ä–≤–Ω—ã–π UI –¥–ª—è ErrorBoundary
  const errorFallback = (
    <div className="errorFallback">
      <h2>¬°Algo sali√≥ mal!</h2>
      <p>Ha ocurrido un error inesperado. Por favor, intenta recargar la p√°gina.</p>
      <button onClick={() => window.location.reload()}>Recargar p√°gina</button>
    </div>
  );

  return (
    <ErrorBoundary fallback={errorFallback}>
      {/* Componente de notificaciones */}
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <Notifications />
      
      <div className="app-container">
        {/* Botones de navegaci√≥n principal */}
        {/* –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <div className="header-buttons">
          <button 
            className="toggleButton" 
            onClick={handleToggleFoodPage}
            disabled={isLoading}
          > 
            {uiState.isChooseFoodPage ? "Disponibilidad" : "Pedir Comida"} 
          </button>
          
          <button 
            className="cartButton" 
            onClick={handleToggleCart}
          >
            Carrito ({cartTotalItems})
          </button>
          
          <button
            className="ordersButton"
            onClick={handleToggleOrdersManager}
          >
            {uiState.showOrdersManager ? "Cerrar Pedidos" : "Gestionar Pedidos"}
          </button>
        </div>
        
        <h3 className="title">Comida R√°pida Online</h3>
        
        {/* Indicador de carga */}
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {isLoading && (
          <div className="loading-indicator">
            Cargando men√∫...
          </div>
        )}
        
        {/* Carrito de compras */}
        {/* –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ */}
        {uiState.showCart && <Cart />}
        
        {/* Gestor de pedidos o contenido principal */}
        {/* –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        {uiState.showOrdersManager ? (
          <OrdersManager />
        ) : (
          <>
            {/* Vista de disponibilidad (men√∫ principal) */}
            {/* –í–∏–¥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) */}
            {!uiState.isChooseFoodPage && (       
              <>
                <h4 className="subTitle">Men√∫s</h4> 
                <ul className="ulApp"> 
                  {menuItems.map((item) => ( 
                    <li 
                      key={item.id} 
                      className="liApp" 
                      onClick={() => handleFoodSelected(item)}
                    > 
                      <p>{item.name}</p>
                      <p>#{item.quantity}</p> 
                    </li> 
                  ))} 
                </ul>
              </>
            )} 
          
            {/* Vista de pedido de comida */}
            {/* –í–∏–¥ –∑–∞–∫–∞–∑–∞ –µ–¥—ã */}
            {uiState.isChooseFoodPage && (
              uiState.selectedFood ? (
                <FoodOrder
                  food={uiState.selectedFood}
                  onReturnToMenu={handleReturnToMenu}
                />
              ) : (
                <Suspense fallback={<div>Cargando detalles‚Ä¶</div>}>
                  <Foods onFoodSelected={handleFoodSelected} />
                </Suspense>
              )
            )}
          </>
        )}
      </div>
    </ErrorBoundary>
  );
}

export default App